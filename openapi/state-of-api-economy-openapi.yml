openapi: 3.1.0
info:

  title: State of the API Economy
  description: |
    This is an API for managing the state of APIs.
  
  version: 0.1.0

  contact:
    name: API Evangelist
    url: https://apievangelist.com
    email: info@apievangelist.com

  termsOfService: http://example.com/terms/

  license: 
    name: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
    identifier: CC-BY-NC-SA-4.0

externalDocs:
  description: State of API Evangelist
  url: http://state.apievangelist.com

servers:

  - url: https://state-api.apievangelist.com
    description: Production

tags:

  - name: Access
    description: | 
      The state of API access.     

  - name: Authentication
    description: | 
      The state of API authentication.    

  - name: Contract
    description: | 
      The state of contract.        

  - name: Distribution
    description: | 
      The state of API distribution.           

  - name: Event-Driven APIs
    description: | 
      The state of Event-Driven APIs.   

  - name: Experience
    description: | 
      The state of API experience.

  - name: Governance
    description: | 
      The state of API governance.   

  - name: GraphQL APIs
    description: | 
      The state of GraphQL APIs.

  - name: HTTP APIs
    description: | 
      The state of HTTP APIs.   

  - name: Persons
    description: | 
      The state of persons.

  - name: Plan
    description: | 
      The state of API plan.     

  - name: Properties
    description: | 
      The state of API properties.    

  - name: Organizations
    description: | 
      The state of organizations.

  - name: Schema
    description: | 
      The state of schema.                                                                

paths:

  /persons:
    post:
      operationId: submitPersonState
      summary: Submit Person State
      description: Submits the state of an person.
      tags:
        - Persons
      requestBody:
        required: true
        description: A valid person schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
            examples:
              PersonOne:
                $ref: '#/components/examples/PersonOne'    
              PersonTwo:
                $ref: '#/components/examples/PersonTwo'                                                      
      responses:
        '201':
          description: Person State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                                           
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /organizations:
    post:
      operationId: submitOrganizationState
      summary: Submit Organization State
      description: Submits the state of an organization.
      tags:
        - Organizations
      requestBody:
        required: true
        description: A valid organization schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
            examples:
              OrganizationOne:
                $ref: '#/components/examples/OrganizationOne'   
              OrganizationTwo:
                $ref: '#/components/examples/OrganizationTwo'                                                     
      responses:
        '201':
          description: Organization State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'  

  /access:
    post:
      operationId: submitAccess
      summary: Submit Access State
      description: Submits the state of API access.
      tags:
        - Access
      requestBody:
        required: true
        description: A valid access schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Access'
            examples:
              AccessOne:
                $ref: '#/components/examples/AccessOne'   
              AccessTwo:
                $ref: '#/components/examples/AccessTwo'                                                      
      responses:
        '201':
          description: Access State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'    

  /distribution:
    post:
      operationId: submitDistribution
      summary: Submit Distribution State
      description: Submits the state of API distribution.
      tags:
        - Distribution
      requestBody:
        required: true
        description: A valid distribution schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Distribution'
            examples:
              DistributionOne:
                $ref: '#/components/examples/DistributionOne'                                     
              DistributionTwo:
                $ref: '#/components/examples/DistributionTwo'                         
      responses:
        '201':
          description: Distribution State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'                              

  /authentication:
    post:
      operationId: submitAuthentication
      summary: Submit Authentication State
      description: Submits the state of API authentication.
      tags:
        - Authentication
      requestBody:
        required: true
        description: A valid authentication schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
            examples:
              AuthenticationOne:
                $ref: '#/components/examples/AuthenticationOne'    
              AuthenticationTwo:
                $ref: '#/components/examples/AuthenticationTwo'                                                    
      responses:
        '201':
          description: Authentication State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /http-apis:
    post:
      operationId: submitHttpApi
      summary: Submit HttpApi State
      description: Submits the state of API HTTP APIs.
      tags:
        - HTTP APIs
      requestBody:
        required: true
        description: A valid HTTP API schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpApi'
            examples:
              HttpApisOne:
                $ref: '#/components/examples/HttpApisOne'    
              HttpApisTwo:
                $ref: '#/components/examples/HttpApisTwo'                                                    
      responses:
        '201':
          description: HTTP API State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                                           
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /graphql-apis:
    post:
      operationId: submitGraphQlApi
      summary: Submit GraphQlApi State
      description: Submits the state of GraphQL APIs.
      tags:
        - GraphQL APIs
      requestBody:
        required: true
        description: A valid GraphQL API schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphQlApi'
            examples:
              GraphQlApiOne:
                $ref: '#/components/examples/GraphQlApiOne'     
              GraphQlApiTwo:
                $ref: '#/components/examples/GraphQlApiTwo'                                                     
      responses:
        '201':
          description: GraphQL API State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                                          
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /event-driven-apis:
    post:
      operationId: submitEventDriven
      summary: Submit EventDriven State
      description: Submits the state of Event-Driven APIs.
      tags:
        - Event-Driven APIs
      requestBody:
        required: true
        description: A valid event-driven API schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDriven'
            examples:
              EventDrivenOne:
                $ref: '#/components/examples/EventDrivenOne'                                     
              EventDrivenTwo:
                $ref: '#/components/examples/EventDrivenTwo'                    
      responses:
        '201':
          description: Event-Driven API State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                                             
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /schema:
    post:
      operationId: submitSchema
      summary: Submit Schema State
      description: Submits the state of schema.
      tags:
        - Schema
      requestBody:
        required: true
        description: A valid Schema schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schema'
            examples:
              SchemaOne:
                $ref: '#/components/examples/SchemaOne'    
              SchemaTwo:
                $ref: '#/components/examples/SchemaTwo'                                                    
      responses:
        '201':
          description: Schema State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                                          
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /contracts:
    post:
      operationId: submitContract
      summary: Submit Contract State
      description: Submits the state of APIs.json.
      tags:
        - Contract
      requestBody:
        required: true
        description: A valid APIs.json schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contract'
            examples:
              ContractOne:
                $ref: '#/components/examples/ContractOne'
              ContractTwo:
                $ref: '#/components/examples/ContractTwo'                                                         
      responses:
        '201':
          description: Contract State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /experiences:
    post:
      operationId: submitExperience
      summary: Submit Experience State
      description: Submits the state of API experience.
      tags:
        - Experience
      requestBody:
        required: true
        description: A valid experience schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experience'
            examples:
              ExperienceOne:
                $ref: '#/components/examples/ExperienceOne'  
              ExperienceTwo:
                $ref: '#/components/examples/ExperienceTwo'                                                     
      responses:
        '201':
          description: Experience State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /properties:
    post:
      operationId: submitProperties
      summary: Submit Properties State
      description: Submits the state of API properties.
      tags:
        - Properties
      requestBody:
        required: true
        description: A valid properties schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
            examples:
              PropertiesOne:
                $ref: '#/components/examples/PropertiesOne' 
              PropertiesTwo:
                $ref: '#/components/examples/PropertiesTwo'                                                       
      responses:
        '201':
          description: Properties State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /plans:
    post:
      operationId: submitPlan
      summary: Submit Plan State
      description: Submits the state of API plan.
      tags:
        - Plan
      requestBody:
        required: true
        description: A valid plan schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
            examples:
              PlanOne:
                $ref: '#/components/examples/PlanOne'    
              PlanTwo:
                $ref: '#/components/examples/PlanTwo'                                                  
      responses:
        '201':
          description: Plan State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'             

  /governance:
    post:
      operationId: submitGovernance
      summary: Submit Governance State
      description: Submits the state of API governance.
      tags:
        - Governance
      requestBody:
        required: true
        description: A valid governance schema.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Governance'
            examples:
              GovernanceOne:
                $ref: '#/components/examples/GovernanceOne'  
              GovernanceTwo:
                $ref: '#/components/examples/GovernanceTwo'                                                     
      responses:
        '201':
          description: Governance State Submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submitted'
              examples:
                Submitted:
                  $ref: '#/components/examples/Submitted'                         
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'          
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'             

components:

  examples:

    PersonOne:
      description: Person one.
      value:
        name: Kin Lane
        email: info@apievangelist.com
        role: API Evangelist

    PersonTwo:
      description: Person two.
      value:
        name: Tim Lane
        email: info@apievangelist.com
        role: API Evangelist    

    OrganizationOne:
      description: Organization one.
      value:
        industries: 
          - Software Delivery
        employees: 1

    OrganizationTwo:
      description: Organization two.
      value:
        industries: 
          - Blog
        employees: 1   

    AccessOne:
      description: Access one.
      value:
        internal: 500
        partner: 50
        public: 5

    AccessTwo:
      description: Access two.
      value:
        internal: 250
        partner: 25
        public: 0    

    DistributionOne:
      description: Distribution one.
      value:
        publicPortal: 1
        internalPortal: 2
        gateway: 1

    DistributionTwo:
      description: Distribution two.
      value:
        publicPortal: 1
        internalPortal: 1
        public: 2   

    AuthenticationOne:
      description: Authentication one.
      value:
        basicAuth: false
        keys: true
        jwt: false
        oauth: false

    AuthenticationTwo:
      description: Authentication two.
      value:
        basicAuth: false
        keys: true
        jwt: false
        oauth: false   

    HttpApisOne:
      description: HTTP APIs one.
      value:
        producedCount: 150
        producedPercentage: 100
        consumeCount: 20
        consumePercentage: 100       
        openApi: true    
        openApiDocumentation: true    
        openApiMockServers: true    
        openApiSdks: true    
        openApiTesting: true    
        openApiSecurity: false  
        openApiPortal: false  
        openApiRespository: true   

    HttpApisTwo:
      description: HTTP APIs two.
      value:
        producedCount: 250
        producedPercentage: 90
        consumeCount: 30
        consumePercentage: 100       
        openApi: true    
        openApiDocumentation: true    
        openApiMockServers: true    
        openApiSdks: true    
        openApiTesting: true    
        openApiSecurity: true  
        openApiPortal: true  
        openApiRespository: true  

    GraphQlApiOne:
      description: GraphQL APIs one.
      value:
        producedCount: 1
        producedPercentage: 5
        consumeCount: 1
        consumePercentage: 5       
        internally: true    
        externally: false    

    GraphQlApiTwo:
      description: GraphQL APIs two.
      value:
        producedCount: 1
        producedPercentage: 5
        consumeCount: 1
        consumePercentage: 5       
        internally: true    
        externally: false 

    EventDrivenOne:
      description: Event-Driven APIs one.
      value:
        webhooksPublish: 1
        webhooksSubscribe: 1
        webSocketsProduce: 1
        webSocketsPublish: 1     
        webSocketsSubscribe: 1     
        kafkaProduce: 1     
        kafkaPublish: 1            
        kafkaSubscribe: 1 
        asyncApi: true    
        asyncApiDocumentation: true    
        asyncApiMockServers: true    
        asyncApiSdks: true    
        asyncApiTesting: true    
        asyncApiSecurity: true  
        asyncApiPortal: true  
        asyncApiRespository: true   

    EventDrivenTwo:
      description: Event-Driven APIs two.
      value:
        webhooksPublish: 1
        webhooksSubscribe: 1
        webSocketsProduce: 1
        webSocketsPublish: 1     
        webSocketsSubscribe: 1     
        kafkaProduce: 1     
        kafkaPublish: 1            
        kafkaSubscribe: 1 
        asyncApi: true    
        asyncApiDocumentation: true    
        asyncApiMockServers: true    
        asyncApiSdks: true    
        asyncApiTesting: true    
        asyncApiSecurity: true  
        asyncApiPortal: true  
        asyncApiRespository: true  

    SchemaOne:
      description: Schema one.
      value:
        data: true
        apis: true
        validation: true
        forms: true
        registry: true     
        repository: true    

    SchemaTwo:
      description: Schema two.
      value:
        data: true
        apis: true
        validation: true
        forms: true
        registry: true     
        repository: true

    ContractOne:
      description: Contract one.
      value:
        discovery: true
        contracts: true
        portal: true
        repository: true

    ContractTwo:
      description: Contract two.
      value:
        discovery: true
        contracts: true
        portal: true
        repository: true   

    ExperienceOne:
      description: Experience one.
      value:
        discovery: 10
        onboarding: 10
        quality: 10
        reliability: 10   
        consistency: 10  

    ExperienceTwo:
      description: Experience two.
      value:
        discovery: 10
        onboarding: 10
        quality: 10
        reliability: 10   
        consistency: 10  

    PropertiesOne:
      description: Properties one.
      value:
        documentation: 10
        mockServers: 10
        sdks: 10
        testing: 10   
        security: 10  

    PropertiesTwo:
      description: Properties two.
      value:
        documentation: 10
        mockServers: 10
        sdks: 10
        testing: 10   
        security: 10   

    PlanOne:
      description: Plan one.
      value:
        applications: true
        rateLimits: true
        chargeAccess: true
        usage: true
        report: true   

    PlanTwo:
      description: Plan two.
      value:
        applications: true
        rateLimits: true
        chargeAccess: true
        usage: true
        report: true   

    GovernanceOne:
      description: Governance one.
      value:
        rules: true
        spectral: true
        vacuum: true
        design: true
        development: true  
        pipelines: true  
        gateway: true    

    GovernanceTwo:
      description: Governance two.
      value:
        rules: true
        spectral: true
        vacuum: true
        design: true
        development: true  
        pipelines: false  
        gateway: false    

    Submitted:
      description: Submitted
      value:
        message: The person state was submitted.                  

  schemas:     

    Person:
      type: object
      description: State of the people.
      required:
        - name
        - email
        - role
      properties:
        name:
          type: string
          description: Your name.
          minLength: 5
          maxLength: 250
          example: Kin Lane
        email:
          type: string
          description: Your email.
          minLength: 1
          maxLength: 1500
          example: info@apievangelist.com
        role:
          type: string
          description: Your role.
          minLength: 10
          maxLength: 250          
          example: Evangelist     

    Organization:
      type: object
      description: State of the organization.
      required:
        - industries
        - employees
      properties:
        industries:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 10
          description: A valid North American Industry Classification System (NAICS) entry.
          example: 
            - Software Publishers
        employees:
          type: integer
          description: The number of employees that work at an enterprise organization.
          minLength: 1
          maxLength: 500000
          example: 100

    Access:
      type: object
      description: State of access.
      required:
        - internal
        - partner
        - public
      properties:
        internal:
          type: integer
          description: How many internal APIs.
          minLength: 0
          maxLength: 50000
          example: 2500
        partner:
          type: integer
          description: How many partner APIs.
          minLength: 0
          maxLength: 50000
          example: 50
        public:
          type: integer
          description: How many public APIs.
          minLength: 0
          maxLength: 50000     
          example: 50

    Distribution:
      type: object
      description: State of distribution.
      required:
        - publicPortal
      properties:
        publicPortal:
          type: integer
          description: How many public API portals.
          minLength: 0
          maxLength: 25
          example: 1
        internalPortal:
          type: integer
          description: How many internal API portals.
          minLength: 0
          maxLength: 25
          example: 1
        gateway:
          type: integer
          description: How many API gateways.
          minLength: 0
          maxLength: 25     
          example: 2          

    Authentication:
      type: object
      description: State of authentication.
      required:
        - basicAuth
        - keys
        - jwt
        - oauth
      properties:
        basicAuth:
          type: boolean
          description: Do you use BasicAuth to authenticate with HTTP APIs?
          example: true
        keys:
          type: boolean
          description: Do you use API keys to authenticate with HTTP APIs?
          example: true
        jwt:
          type: boolean
          description: HDo you use JWT to authenticate with HTTP APIs?
          example: true
        oauth:
          type: boolean
          description: Do you use OAuth to authenticate with HTTP APIs?
          example: true         

    HttpApi:
      type: object
      description: State of HTTP APIs.
      required:
        - producedCount
        - producedPercentage
        - consumeCount
        - consumePercentage
      properties:
        producedCount:
          type: integer
          description: How many HTTP APIs do you produce?
          minLength: 0
          maxLength: 10000
          example: 500
        producedPercentage:
          type: integer
          description: What percentage of APIs you produce are HTTP APIs?
          minLength: 0
          maxLength: 100
          example: 50
        consumeCount:
          type: integer
          description: How many HTTP APIs do you consume?
          minLength: 0
          maxLength: 1000     
          example: 25
        consumePercentage:
          type: integer
          description: What percentage of APIs you consume are HTTP APIs?
          minLength: 0
          maxLength: 100     
          example: 90
        openApi:
          type: boolean
          description: Do you use OpenAPI? 
          example: true  
        openApiDocumentation:
          type: boolean
          description: Do you use OpenAPI for Generating Documentation? 
          example: true  
        openApiMockServers:
          type: boolean
          description: Do you use OpenAPI for Generating Mock Servers? 
          example: true                                
        openApiSdks:
          type: boolean
          description: Do you use OpenAPI for Software Development Kits (SDKs)? 
          example: true  
        openApiTesting:
          type: boolean
          description: Do you use OpenAPI for Testing? 
          example: true  
        openApiSecurity:
          type: boolean
          description: Do you use OpenAPI for Security? 
          example: true 
        openApiPortal:
          type: boolean
          description: Do you publish OpenAPI to a portal?
          example: true   
        openApiRespository:
          type: boolean
          description: Do you publish OpenAPI to a repository?
          example: true                                           

    GraphQlApi:
      type: object
      description: State of GraphQL APIs.
      required:
        - producedCount
        - producedPercentage
        - consumeCount
        - consumePercentage
      properties:
        producedCount:
          type: integer
          description: How many GraphQL APIs do you produce?
          minLength: 0
          maxLength: 10000
          example: 500
        producedPercentage:
          type: integer
          description: What percentage of the  APIs you produce are GraphQL?
          minLength: 0
          maxLength: 100
          example: 50
        consumeCount:
          type: integer
          description: How many GraphQL APIs do you consume?
          minLength: 0
          maxLength: 1000     
          example: 25
        consumePercentage:
          type: integer
          description: What percentage of the APIs you consume are GraphQL APIs?
          minLength: 0
          maxLength: 100     
          example: 90
        internally:
          type: boolean
          description: Do you use GraphQL internally?
          example: true  
        externally:
          type: boolean
          description: Do you use GraphQL externally?
          example: true  

    EventDriven:
      type: object
      description: State of Event-Driven APIs.
      required:
        - webhooksPublish
        - webhooksSubscribe
        - webSocketsProduce
        - webSocketsPublish
        - webSocketsSubscribe
        - kafkaProduce
        - kafkaPublish
        - kafkaSubscribe        
      properties:
        webhooksPublish:
          type: integer
          description: How many Webhooks to you publish?
          minLength: 0
          maxLength: 10000
          example: 500
        webhooksSubscribe:
          type: integer
          description: How many Webhooks to you subscribe?
          minLength: 0
          maxLength: 1000     
          example: 25
        webSocketsProduce:
          type: integer
          description: How many WebSockets to you produce?
          minLength: 0
          maxLength: 10000
          example: 500          
        webSocketsPublish:
          type: integer
          description: How many WebSockets to you publish to?
          minLength: 0
          maxLength: 10000
          example: 500
        webSocketsSubscribe:
          type: integer
          description: How many WebSockets to you subscribe to?
          minLength: 0
          maxLength: 1000     
          example: 25  
        kafkaProduce:
          type: integer
          description: How many Kafka APIs to you produce?
          minLength: 0
          maxLength: 10000
          example: 500          
        kafkaPublish:
          type: integer
          description: How many Kafka APIs to you publish to?
          minLength: 0
          maxLength: 10000
          example: 500
        kafkaSubscribe:
          type: integer
          description: How many Kafka APIs to you subscribe to?
          minLength: 0
          maxLength: 1000     
          example: 25                  
        asyncApi:
          type: boolean
          description: Do you use AsyncAPI? 
          example: true  
        asyncApiDocumentation:
          type: boolean
          description: Do you use AsyncAPI for Generating Documentation? 
          example: true  
        asyncApiMockServers:
          type: boolean
          description: Do you use AsyncAPI for Generating Mock Servers? 
          example: true                                
        asyncApiSdks:
          type: boolean
          description: Do you use AsyncAPI for Software Development Kits (SDKs)? 
          example: true  
        asyncApiTesting:
          type: boolean
          description: Do you use AsyncAPI for Testing? 
          example: true  
        asyncApiSecurity:
          type: boolean
          description: Do you use AsyncAPI for Security? 
          example: true 
        asyncApiPortal:
          type: boolean
          description: Do you publish AsyncAPI to a portal?
          example: true   
        asyncApiRespository:
          type: boolean
          description: Do you publish AsyncAPI to a repository?
          example: true   

    Schema:
      type: object
      description: State of schema.
      required:
        - data
        - apis
        - validation
        - forms
        - registry
        - repository
      properties:
        data:
          type: boolean
          description: Do you use JSON Schema to define data?
          example: true  
        apis:
          type: boolean
          description: Do you use JSON Schema to define APIs?
          example: true            
        validation:
          type: boolean
          description: Do you use JSON Schema to validate data?
          example: true            
        forms:
          type: boolean
          description: Do you use JSON Schema to generate forms?
          example: true            
        registry:
          type: boolean
          description: Do you publish JSON Schema to registry?
          example: true   
        repository:
          type: boolean
          description: Do you publish JSON Schema to repository?
          example: true   

    Contract:
      type: object
      description: State of discovery.
      required:
        - discovery
        - contracts
        - portal
        - repository
      properties:
        discovery:
          type: boolean
          description: Do you use APIs.json for discovery?
          example: true  
        contracts:
          type: boolean
          description: Do you use APIs.json for contracts?
          example: true                      
        portal:
          type: boolean
          description: Do you publish APIs.json to portal?
          example: true   
        repository:
          type: boolean
          description: Do you publish APIs.json to repository?
          example: true 

    Experience:
      type: object
      description: State of experience.
      required:
        - discovery
        - onboarding
        - quality
        - reliability
        - consistency
      properties:
        discovery:
          type: integer
          description: How much of a priority is API discovery?
          example: 10  
          minLength: 3
          maxLength: 3                 
        onboarding:
          type: integer
          description: How much of a priority is API onboarding?
          example: 10   
          minLength: 3
          maxLength: 3                     
        quality:
          type: integer
          description: How much of a priority is API quality?
          example: 10 
          minLength: 3
          maxLength: 3                       
        reliability:
          type: integer
          description: How much of a priority is API reliability?
          example: 10  
          minLength: 3
          maxLength: 3                      
        consistency:
          type: integer
          description: How much of a priority is API consistency?
          example: 10 
          minLength: 3
          maxLength: 3                                          

    Properties:
      type: object
      description: State of API operational properties.
      required:
        - documentation
        - mockServers
        - sdks
        - testing
        - security
      properties:
        documentation:
          type: integer
          description: How much of a priority is API documentation?
          example: 10 
          minLength: 3
          maxLength: 3 
        mockServers:
          type: integer
          description: How much of a priority is API mock servers?
          example: 10 
          minLength: 3
          maxLength: 3           
        sdks:
          type: integer
          description: How much of a priority is SDKs?
          example: 10 
          minLength: 3
          maxLength: 3          
        testing:
          type: integer
          description: How much of a priority is API testing?
          example: 10 
          minLength: 3
          maxLength: 3          
        security:
          type: integer
          description: How much of a priority is API security?
          example: 10 
          minLength: 3
          maxLength: 3    

    Plan:
      type: object
      description: State of API planning.
      required:
        - applications
        - rateLimits
        - chargeAccess
        - usage
        - report
      properties:
        applications:
          type: boolean
          description: Do you require an application to be defined to access APIs?
          example: true  
        rateLimits:
          type: boolean
          description: Do you enforce rate limits across all APIs?
          example: true            
        chargeAccess:
          type: boolean
          description: Do you charge for access to any APIs?
          example: true            
        usage:
          type: boolean
          description: Do you monitor API usage for APIs in production?
          example: true            
        report:
          type: boolean
          description: Do you report API usage data with consumers?
          example: true 

    Governance:
      type: object
      description: State of API governance.
      required:
        - rules
        - spectral
        - vacuum
        - design
        - development
        - pipelines
        - gateway
      properties:
        rules:
          type: boolean
          description: Do you govern your APIs using rules?
          example: true  
        spectral:
          type: boolean
          description: Do you use Spectral for governance rules?
          example: true            
        vacuum:
          type: boolean
          description: Do you use Vacuum for governance?
          example: true            
        design:
          type: boolean
          description: Do you apply rules during design of APIs?
          example: true            
        development:
          type: boolean
          description: Do you apply rules during development of APIs?
          example: true   
        pipelines:
          type: boolean
          description: Do you apply rules during pipeline builds of APIs?
          example: true     
        gateway:
          type: boolean
          description: Do you validate JSON Schema at the API gateway?
          example: true 

    Submitted:
      type: object
      description: The submitted state.
      required:
        - message
      properties:
        message:
          type: string
          minLength: 10
          maxLength: 50             
          description: The message being returned.
          example: The person state was submitted.                                              

    Problem:
      type: object
      description: This is a Problem Details for HTTP APIs object.
      required:
        - title
        - status
      xml:
        name: problem
        namespace: urn:ietf:rfc:7807
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type
          example: https://example.com/probs/out-of-credit
          minLength: 10
          maxLength: 2048            
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: You do not have enough credit.
          minLength: 5
          maxLength: 250            
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
          example: Your current balance is 30, but that costs 50.
          minLength: 10
          maxLength: 1000            
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem
          example: /account/12345/msgs/abc
          minLength: 10
          maxLength: 250            
        status:
          type: integer
          description: The HTTP status code
          example: 400        
          minLength: 3
          maxLength: 3   
          
  headers:

    RateLimit:
      description: |
        The RateLimit header communicates quota policies. It contains a `limit` to
        convey the expiring limit, `remaining` to convey the remaining quota units,
        and `reset` to convey the time window reset time.
      schema:
        type: string
        minLength: 10
        maxLength: 250  
        example: limit=10, remaining=0, reset=10

    Retry-After:
      description: | 
        The Retry-After header indicates how long the user agent should wait before making a follow-up request. 
        The value is in seconds and can be an integer or a date in the future. 
        If the value is an integer, it indicates the number of seconds to wait. 
        If the value is a date, it indicates the time at which the user agent should make a follow-up request. 
      schema:
        type: string
        minLength: 2
        maxLength: 250          
      examples:
        integer:
          value: '120'
          summary: Retry after 120 seconds
        date:
          value: 'Fri, 31 Dec 2021 23:59:59 GMT'
          summary: Retry after the specified date

  responses:

    BadRequest:
      description: Bad Request
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.

    Conflict:
      description: Conflict
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/conflict
            title: Conflict
            status: 409
            detail: There is a conflict with an existing resource.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/conflict
            title: Conflict
            status: 409
            detail: There is a conflict with an existing resource.

    Forbidden:
      description: Forbidden
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.

    InternalServerError:
      description: Internal Server Error
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.

    NotFound:
      description: Not Found
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.

    TooManyRequests:
      description: Too Many Requests
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.

    Unauthorized:
      description: Unauthorized
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.