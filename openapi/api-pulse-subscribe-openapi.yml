openapi: 3.1.0
info:

  title: API Pulse - Subscribe
  description: |
    This is an API for subscribing to the API pulse.
  
  version: 0.1.0

  contact:
    name: API Evangelist
    url: https://apievangelist.com
    email: info@apievangelist.com

  termsOfService: http://example.com/terms/

  license: 
    name: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International
    identifier: CC-BY-NC-SA-4.0

externalDocs:
  description: API Pulse
  url: http://pulse.apievangelist.com

servers:

  - url: https://pulse-api.apievangelist.com
    description: Production

tags:

  - name: Check
    description: | 
      Checks the API Pulse. 

  - name: Report
    description: | 
      Report the API Pulse.                                                                              

paths:

  /check:
    post:
      operationId: checkReport
      summary: Check API Pulse
      description: Checks in on the API pulse in an ongoing way for industry.
      parameters:
        - $ref: '#/components/parameters/Industries'      
        - $ref: '#/components/parameters/Signals'   
      tags:
        - Check                                                      
      responses:
        '201':
          description: Succesful API Pulse Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
              examples:
                Submitted:
                  $ref: '#/components/examples/Report'                                           
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

  /report:
    post:
      operationId: retrieveReport
      summary: Retrieve API Pulse Report
      description: Retrieves the overall API Pulse Report for Spring or Fall.
      parameters:
        - $ref: '#/components/parameters/Industries'      
        - $ref: '#/components/parameters/Signals'   
      tags:
        - Report                                                      
      responses:
        '201':
          description: Succesful API Pulse Report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
              examples:
                Submitted:
                  $ref: '#/components/examples/Report'                                           
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'   

components:

  examples:

    Report:
      description: Report.
      value:
        people:
          role: 
            - name: API Evangelist 
              count: 1
          countries: 
            - name: US
              count: 1   
        organization:
          industries: 
            - name: Software Delivery
              count: 2
          countries: 
            - name: US
              count: 1              
          employees: 1  
        access:
          internal: 500
          partner: 50
          public: 5   
        distribution:
          publicPortal: 1
          internalPortal: 2
          gateway: 1  
        authentication:
          basicAuth: false
          keys: 50
          jwt: false
          oauth: false  
        httpApis:
          producedCount: 150
          producedPercentage: 100
          consumeCount: 20
          consumePercentage: 100       
          openApi: 50    
          openApiDocumentation: 50    
          openApiMockServers: 50    
          openApiSdks: 50    
          openApiTesting: 50    
          openApiSecurity: false  
          openApiPortal: false  
          openApiRespository: 50  
        graphQlApis:
          producedCount: 1
          producedPercentage: 5
          consumeCount: 1
          consumePercentage: 5       
          internally: 50    
          externally: false   
        eventDrivenApis:
          webhooksPublish: 1
          webhooksSubscribe: 1
          webSocketsProduce: 1
          webSocketsPublish: 1     
          webSocketsSubscribe: 1     
          kafkaProduce: 1     
          kafkaPublish: 1            
          kafkaSubscribe: 1 
          asyncApi: 50    
          asyncApiDocumentation: 50    
          asyncApiMockServers: 50    
          asyncApiSdks: 50    
          asyncApiTesting: 50    
          asyncApiSecurity: 50  
          asyncApiPortal: 50  
          asyncApiRespository: 50 
        schema:
          data: 50
          apis: 50
          validation: 50
          forms: 50
          registry: 50     
          repository: 50    
        contract:
          discovery: 50
          contracts: 50
          portal: 50
          repository: 50  
        experience:
          discovery: 10
          onboarding: 10
          quality: 10
          reliability: 10   
          consistency: 10  
          communication: 10   
        properties:
          documentation: 10
          mockServers: 10
          sdks: 10
          testing: 10   
          security: 10  
        plan:
          applications: 50
          rateLimits: 50
          chargeAccess: 50
          usage: 50
          report: 50  
        governance:
          rules: 50
          spectral: 50
          vacuum: 50
          design: 50
          development: 50  
          pipelines: 50  
          gateway: 50                                                                                              

    People:
      description: People.
      value:
        role: 
          - name: API Evangelist 
            count: 1
        countries: 
          - name: US
            count: 1            

    Organization:
      description: Organization.
      value:
        industries: 
          - name: Software Delivery
            count: 2
        countries: 
          - name: US
            count: 1              
        employees: 1

    Access:
      description: Access.
      value:
        internal: 500
        partner: 50
        public: 5

    Distribution:
      description: Distribution.
      value:
        publicPortal: 1
        internalPortal: 2
        gateway: 1

    Authentication:
      description: Authentication.
      value:
        basicAuth: false
        keys: 50
        jwt: false
        oauth: false

    HttpApis:
      description: HTTP APIs.
      value:
        producedCount: 150
        producedPercentage: 100
        consumeCount: 20
        consumePercentage: 100       
        openApi: 50    
        openApiDocumentation: 50    
        openApiMockServers: 50    
        openApiSdks: 50    
        openApiTesting: 50    
        openApiSecurity: false  
        openApiPortal: false  
        openApiRespository: 50   

    GraphQlApis:
      description: GraphQL APIs.
      value:
        producedCount: 1
        producedPercentage: 5
        consumeCount: 1
        consumePercentage: 5       
        internally: 50    
        externally: false    

    EventDriven:
      description: Event-Driven APIs.
      value:
        webhooksPublish: 1
        webhooksSubscribe: 1
        webSocketsProduce: 1
        webSocketsPublish: 1     
        webSocketsSubscribe: 1     
        kafkaProduce: 1     
        kafkaPublish: 1            
        kafkaSubscribe: 1 
        asyncApi: 50    
        asyncApiDocumentation: 50    
        asyncApiMockServers: 50    
        asyncApiSdks: 50    
        asyncApiTesting: 50    
        asyncApiSecurity: 50  
        asyncApiPortal: 50  
        asyncApiRespository: 50   

    Schema:
      description: Schema.
      value:
        data: 50
        apis: 50
        validation: 50
        forms: 50
        registry: 50     
        repository: 50    

    Contract:
      description: Contract.
      value:
        discovery: 50
        contracts: 50
        portal: 50
        repository: 50

    Experience:
      description: Experience.
      value:
        discovery: 10
        onboarding: 10
        quality: 10
        reliability: 10   
        consistency: 10  
        communication: 10  

    Properties:
      description: Properties.
      value:
        documentation: 10
        mockServers: 10
        sdks: 10
        testing: 10   
        security: 10  

    Plan:
      description: Plan.
      value:
        applications: 50
        rateLimits: 50
        chargeAccess: 50
        usage: 50
        report: 50   

    Governance:
      description: Governance.
      value:
        rules: 50
        spectral: 50
        vacuum: 50
        design: 50
        development: 50  
        pipelines: 50  
        gateway: 50      

  parameters:

    Industries: 
      name: industries
      in: query
      required: 50
      description: The industries to return.
      schema:
        type: string
        minLength: 3
        maxLength: 1000 
      example: Software Publishers, Couriers and Messengers

    Countries: 
      name: countries
      in: query
      required: 50
      description: The countries to return.
      schema:
        type: string
        minLength: 3
        maxLength: 1000 
      example: US, UK  

    Signals: 
      name: signals
      in: query
      required: 50
      description: The signals to return.
      schema:
        type: string
        minLength: 3
        maxLength: 1000 
      example: People, Organizations, Access, Authentication, Contracts, Distribution, Event-Driven APIs, Experience, Governance, GraphQL APIs, HTTP APIs, Plans, Properties

  schemas:    

    Report:
      type: object
      description: An API Pulse Report
      anyOf:
        - $ref: '#/components/parameters/People'           
        - $ref: '#/components/parameters/Organization'  
        - $ref: '#/components/parameters/Access'  
        - $ref: '#/components/parameters/Authentication'  
        - $ref: '#/components/parameters/HttpApi'  
        - $ref: '#/components/parameters/GraphQlApi'  
        - $ref: '#/components/parameters/EventDriven'  
        - $ref: '#/components/parameters/Schema'  
        - $ref: '#/components/parameters/Contract'  
        - $ref: '#/components/parameters/Experience'  
        - $ref: '#/components/parameters/Properties'  
        - $ref: '#/components/parameters/Plan'  
        - $ref: '#/components/parameters/Governance'

    People:
      type: object
      description: State of the people.
        - role
        - countries
      properties:
        people:
          type: object
          properties:
            role:
              type: string
              description: Role of the person.
              minLength: 10
              maxLength: 250          
              example: Evangelist       
            countries:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 10
              description: A valid ISO 3166 country.
              example: 
                - US                                

    Organization:
      type: object
      description: State of the organization.
      required:
        - industries
        - employees
        - countries
      properties:
        organization:
          type: object
          properties:      
            industries:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 10
              description: A valid North American Industry Classification System (NAICS) entry.
              example: 
                - Software Publishers
            countries:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 10
              description: A valid ISO 3166 country.
              example: 
                - US              
            employees:
              type: integer
              description: The number of employees that work at an enterprise organization.
              minLength: 1
              maxLength: 500000
              example: 100

    Access:
      type: object
      description: State of access.
      required:
        - internal
        - partner
        - public
      properties:  
        access:
          properties:
            internal:
              type: integer
              description: How many internal APIs.
              minLength: 0
              maxLength: 50000
            partner:
              type: integer
              description: How many partner APIs.
              minLength: 0
              maxLength: 50000
            public:
              type: integer
              description: How many public APIs.
              minLength: 0
              maxLength: 50000     
              example: 50       

    Distribution:
      type: object
      description: State of distribution.
      required:
        - publicPortal
        - internalPortal
        - gateway
      properties: 
        distribution:
          type: object
          properties:       
            publicPortal:
              type: integer
              description: How many public API portals.
              minLength: 0
              maxLength: 25
              example: 1
            internalPortal:
              type: integer
              description: How many internal API portals.
              minLength: 0
              maxLength: 25
              example: 1
            gateway:
              type: integer
              description: How many API gateways.
              minLength: 0
              maxLength: 25     
              example: 2                   

    Authentication:
      type: object
      description: State of authentication.
      required:
        - authentication
      properties: 
        authentication:
          type: object
          required:
            - basicAuth
            - keys
            - jwt
            - oauth          
          properties:         
            basicAuth:
              type: integer
              description: Do you use BasicAuth to authenticate with HTTP APIs?
              minLength: 0
              maxLength: 100     
              example: 50 
            keys:
              type: integer
              description: Do you use API keys to authenticate with HTTP APIs?
              minLength: 0
              maxLength: 100     
              example: 50 
            jwt:
              type: integer
              description: HDo you use JWT to authenticate with HTTP APIs?
              minLength: 0
              maxLength: 100     
              example: 50 
            oauth:
              type: integer
              description: Do you use OAuth to authenticate with HTTP APIs?
              minLength: 0
              maxLength: 100     
              example: 50                    

    HttpApi:
      type: object
      description: State of HTTP APIs.
      required:
        - httpApis
      properties:
        httpApis:
          type: object
          required:
            - producedCount
            - producedPercentage
            - consumeCount
            - consumePercentage
            - openApi
            - designFirst
            - openApiDocumentation
            - openApiMockServers
            - openApiSdks
            - openApiTesting
            - openApiSecurity
            - openApiPortal
            - openApiRespository          
          properties:       
            producedCount:
              type: integer
              description: How many HTTP APIs do you produce?
              minLength: 0
              maxLength: 10000
              example: 500
            producedPercentage:
              type: integer
              description: What percentage of APIs you produce are HTTP APIs?
              minLength: 0
              maxLength: 100
              example: 50
            consumeCount:
              type: integer
              description: How many HTTP APIs do you consume?
              minLength: 0
              maxLength: 1000     
              example: 25
            consumePercentage:
              type: integer
              description: What percentage of APIs you consume are HTTP APIs?
              minLength: 0
              maxLength: 100     
              example: 90
            openApi:
              type: integer
              description: Do you use OpenAPI? 
              minLength: 0
              maxLength: 100     
              example: 50   
            designFirst:
              type: integer
              description: Are you design-first when producing HTTP APIs?
              minLength: 0
              maxLength: 100     
              example: 50             
            openApiDocumentation:
              type: integer
              description: Do you use OpenAPI for Generating Documentation? 
              minLength: 0
              maxLength: 100     
              example: 50   
            openApiMockServers:
              type: integer
              description: Do you use OpenAPI for Generating Mock Servers? 
              minLength: 0
              maxLength: 100     
              example: 50                                 
            openApiSdks:
              type: integer
              description: Do you use OpenAPI for Software Development Kits (SDKs)? 
              minLength: 0
              maxLength: 100     
              example: 50   
            openApiTesting:
              type: integer
              description: Do you use OpenAPI for Testing? 
              minLength: 0
              maxLength: 100     
              example: 50   
            openApiSecurity:
              type: integer
              description: Do you use OpenAPI for Security? 
              minLength: 0
              maxLength: 100     
              example: 50  
            openApiPortal:
              type: integer
              description: Do you publish OpenAPI to a portal?
              minLength: 0
              maxLength: 100     
              example: 50    
            openApiRespository:
              type: integer
              description: Do you publish OpenAPI to a repository?
              minLength: 0
              maxLength: 100     
              example: 50                                                    

    GraphQlApi:
      type: object
      description: State of GraphQL APIs.
      required:
        - graphQlApis
      properties:   
        graphQlApis:
          type: object
          required:
            - producedCount
            - producedPercentage
            - consumeCount
            - consumePercentage
            - internally
            - externally          
          properties:        
            producedCount:
              type: integer
              description: How many GraphQL APIs do you produce?
              minLength: 0
              maxLength: 10000
              example: 500
            producedPercentage:
              type: integer
              description: What percentage of the  APIs you produce are GraphQL?
              minLength: 0
              maxLength: 100
              example: 50
            consumeCount:
              type: integer
              description: How many GraphQL APIs do you consume?
              minLength: 0
              maxLength: 1000     
              example: 25
            consumePercentage:
              type: integer
              description: What percentage of the APIs you consume are GraphQL APIs?
              minLength: 0
              maxLength: 100     
              example: 90
            internally:
              type: integer
              description: Do you use GraphQL internally?
              minLength: 0
              maxLength: 100     
              example: 50   
            externally:
              type: integer
              description: Do you use GraphQL externally?
              minLength: 0
              maxLength: 100     
              example: 50             

    EventDrivenApis:
      type: object
      description: State of Event-Driven APIs.
      required:
        - eventDriveApis
      properties:   
        eventDriveApis:
          type: object
          required:
            - webhooksPublish
            - webhooksSubscribe
            - webSocketsProduce
            - webSocketsPublish
            - webSocketsSubscribe
            - kafkaProduce
            - kafkaPublish
            - kafkaSubscribe   
            - asyncApi    
            - designFirst 
            - asyncApiDocumentation
            - asyncApiMockServers
            - asyncApiSdks
            - asyncApiTesting
            - asyncApiSecurity
            - asyncApiPortal
            - asyncApiRespository          
          properties:       
            webhooksPublish:
              type: integer
              description: How many Webhooks to you publish?
              minLength: 0
              maxLength: 10000
              example: 500
            webhooksSubscribe:
              type: integer
              description: How many Webhooks to you subscribe?
              minLength: 0
              maxLength: 1000     
              example: 25
            webSocketsProduce:
              type: integer
              description: How many WebSockets to you produce?
              minLength: 0
              maxLength: 10000
              example: 500          
            webSocketsPublish:
              type: integer
              description: How many WebSockets to you publish to?
              minLength: 0
              maxLength: 10000
              example: 500
            webSocketsSubscribe:
              type: integer
              description: How many WebSockets to you subscribe to?
              minLength: 0
              maxLength: 1000     
              example: 25  
            kafkaProduce:
              type: integer
              description: How many Kafka APIs to you produce?
              minLength: 0
              maxLength: 10000
              example: 500          
            kafkaPublish:
              type: integer
              description: How many Kafka APIs to you publish to?
              minLength: 0
              maxLength: 10000
              example: 500
            kafkaSubscribe:
              type: integer
              description: How many Kafka APIs to you subscribe to?
              minLength: 0
              maxLength: 1000     
              example: 25                  
            asyncApi:
              type: integer
              description: Do you use AsyncAPI? 
              minLength: 0
              maxLength: 100     
              example: 50   
            designFirst:
              type: integer
              description: Are you design-first when producing event-driven APIs?
              minLength: 0
              maxLength: 100     
              example: 50            
            asyncApiDocumentation:
              type: integer
              description: Do you use AsyncAPI for Generating Documentation? 
              minLength: 0
              maxLength: 100     
              example: 50   
            asyncApiMockServers:
              type: integer
              description: Do you use AsyncAPI for Generating Mock Servers? 
              minLength: 0
              maxLength: 100     
              example: 50                                 
            asyncApiSdks:
              type: integer
              description: Do you use AsyncAPI for Software Development Kits (SDKs)? 
              minLength: 0
              maxLength: 100     
              example: 50   
            asyncApiTesting:
              type: integer
              description: Do you use AsyncAPI for Testing? 
              minLength: 0
              maxLength: 100     
              example: 50   
            asyncApiSecurity:
              type: integer
              description: Do you use AsyncAPI for Security? 
              minLength: 0
              maxLength: 100     
              example: 50  
            asyncApiPortal:
              type: integer
              description: Do you publish AsyncAPI to a portal?
              minLength: 0
              maxLength: 100     
              example: 50    
            asyncApiRespository:
              type: integer
              description: Do you publish AsyncAPI to a repository?
              minLength: 0
              maxLength: 100     
              example: 50             

    Schema:
      type: object
      description: State of schema.
      required:
        - schema
      properties: 
        schema:
          type: object
          required:
            - data
            - apis
            - validation
            - forms
            - registry
            - repository          
          properties:         
            data:
              type: integer
              description: Do you use JSON Schema to define data?
              minLength: 0
              maxLength: 100     
              example: 50   
            apis:
              type: integer
              description: Do you use JSON Schema to define APIs?
              minLength: 0
              maxLength: 100     
              example: 50             
            validation:
              type: integer
              description: Do you use JSON Schema to validate data?
              minLength: 0
              maxLength: 100     
              example: 50             
            forms:
              type: integer
              description: Do you use JSON Schema to generate forms?
              minLength: 0
              maxLength: 100     
              example: 50             
            registry:
              type: integer
              description: Do you publish JSON Schema to registry?
              minLength: 0
              maxLength: 100     
              example: 50    
            repository:
              type: integer
              description: Do you publish JSON Schema to repository?
              minLength: 0
              maxLength: 100     
              example: 50              

    Contract:
      type: object
      description: State of discovery.
      required:
        - contracts
      properties:  
        contracts:
          type: object
          required:
            - discovery
            - contracts
            - portal
            - repository          
          properties:       
            discovery:
              type: integer
              description: Do you use APIs.json for discovery?
              minLength: 0
              maxLength: 100     
              example: 50   
            contracts:
              type: integer
              description: Do you use APIs.json for contracts?
              minLength: 0
              maxLength: 100     
              example: 50                       
            portal:
              type: integer
              description: Do you publish APIs.json to portal?
              minLength: 0
              maxLength: 100     
              example: 50    
            repository:
              type: integer
              description: Do you publish APIs.json to repository?
              minLength: 0
              maxLength: 100     
              example: 50             

    Experience:
      type: object
      description: State of experience.
      required:
        - experience
      properties: 
        experience:
          type: object
          required:
            - discovery
            - onboarding
            - quality
            - reliability
            - consistency
            - communication          
          properties:         
            discovery:
              type: integer
              description: How much of a priority is API discovery?
              example: 10  
              minLength: 3
              maxLength: 3                 
            onboarding:
              type: integer
              description: How much of a priority is API onboarding?
              example: 10   
              minLength: 3
              maxLength: 3                     
            quality:
              type: integer
              description: How much of a priority is API quality?
              example: 10 
              minLength: 3
              maxLength: 3                       
            reliability:
              type: integer
              description: How much of a priority is API reliability?
              example: 10  
              minLength: 3
              maxLength: 3                      
            consistency:
              type: integer
              description: How much of a priority is API consistency?
              example: 10 
              minLength: 3
              maxLength: 3  
            communication:
              type: integer
              description: How much of a priority is API communication?
              example: 10 
              minLength: 3
              maxLength: 3     
            automation:
              type: integer
              description: How much of a priority is API automation?
              example: 10 
              minLength: 3
              maxLength: 3   
            integration:
              type: integer
              description: How much of a priority is API integration?
              example: 10 
              minLength: 3
              maxLength: 3                                                                    

    Properties:
      type: object
      description: State of API operational properties.
      required:
        - properties
      properties:  
        properties:
          type: object
          required:
            - documentation
            - mockServers
            - sdks
            - testing
            - security          
          properties:          
            documentation:
              type: integer
              description: How much of a priority is API documentation?
              example: 10 
              minLength: 3
              maxLength: 3 
            mockServers:
              type: integer
              description: How much of a priority is API mock servers?
              example: 10 
              minLength: 3
              maxLength: 3           
            sdks:
              type: integer
              description: How much of a priority is SDKs?
              example: 10 
              minLength: 3
              maxLength: 3          
            testing:
              type: integer
              description: How much of a priority is API testing?
              example: 10 
              minLength: 3
              maxLength: 3          
            security:
              type: integer
              description: How much of a priority is API security?
              example: 10 
              minLength: 3
              maxLength: 3  
            versioning:
              type: integer
              description: How much of a priority is API versioning?
              example: 10 
              minLength: 3
              maxLength: 3                        

    Plan:
      type: object
      description: State of API planning.
      required:
        - plans
      properties:  
        plans:
          type: object
          required:
            - applications
            - rateLimits
            - chargeAccess
            - usage
            - report          
          properties:          
            applications:
              type: integer
              description: Do you require an application to be defined to access APIs?
              minLength: 0
              maxLength: 100     
              example: 50   
            rateLimits:
              type: integer
              description: Do you enforce rate limits across all APIs?
              minLength: 0
              maxLength: 100     
              example: 50             
            chargeAccess:
              type: integer
              description: Do you charge for access to any APIs?
              minLength: 0
              maxLength: 100     
              example: 50             
            usage:
              type: integer
              description: Do you monitor API usage for APIs in production?
              minLength: 0
              maxLength: 100     
              example: 50             
            report:
              type: integer
              description: Do you report on API usage data with consumers?
              minLength: 0
              maxLength: 100     
              example: 50            

    Governance:
      type: object
      description: State of API governance.
      required:
        - governance
      properties: 
        governance:
          type: object
          required:
            - spectral
            - vacuum
            - design
            - development
            - pipelines
            - gateway          
          properties:           
            spectral:
              type: integer
              description: Do you use Spectral for governance rules?
              minLength: 0
              maxLength: 100     
              example: 50             
            vacuum:
              type: integer
              description: Do you use Vacuum for governance?
              minLength: 0
              maxLength: 100     
              example: 50             
            design:
              type: integer
              description: Do you apply rules during design of APIs?
              minLength: 0
              maxLength: 100     
              example: 50             
            development:
              type: integer
              description: Do you apply rules during development of APIs?
              minLength: 0
              maxLength: 100     
              example: 50    
            pipelines:
              type: integer
              description: Do you apply rules during pipeline builds of APIs?
              minLength: 0
              maxLength: 100     
              example: 50      
            gateway:
              type: integer
              description: Do you validate JSON Schema at the API gateway?
              minLength: 0
              maxLength: 100     
              example: 50            

    Problem:
      type: object
      description: This is a Problem Details for HTTP APIs object.
      required:
        - title
        - status
      xml:
        name: problem
        namespace: urn:ietf:rfc:7807
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type
          example: https://example.com/probs/out-of-credit
          minLength: 10
          maxLength: 2048            
        title:
          type: string
          description: A short, human-readable summary of the problem type
          example: You do not have enough credit.
          minLength: 5
          maxLength: 250            
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
          example: Your current balance is 30, but that costs 50.
          minLength: 10
          maxLength: 1000            
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem
          example: /account/12345/msgs/abc
          minLength: 10
          maxLength: 250            
        status:
          type: integer
          description: The HTTP status code
          example: 400        
          minLength: 3
          maxLength: 3   
          
  headers:

    RateLimit:
      description: |
        The RateLimit header communicates quota policies. It contains a `limit` to
        convey the expiring limit, `remaining` to convey the remaining quota units,
        and `reset` to convey the time window reset time.
      schema:
        type: string
        minLength: 10
        maxLength: 250  
        example: limit=10, remaining=0, reset=10

    Retry-After:
      description: | 
        The Retry-After header indicates how long the user agent should wait before making a follow-up request. 
        The value is in seconds and can be an integer or a date in the future. 
        If the value is an integer, it indicates the number of seconds to wait. 
        If the value is a date, it indicates the time at which the user agent should make a follow-up request. 
      schema:
        type: string
        minLength: 2
        maxLength: 250          
      examples:
        integer:
          value: '120'
          summary: Retry after 120 seconds
        date:
          value: 'Fri, 31 Dec 2021 23:59:59 GMT'
          summary: Retry after the specified date

  responses:

    BadRequest:
      description: Bad Request
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/bad-request
            title: Bad Request
            status: 400
            detail: The request is invalid or missing required parameters.

    Conflict:
      description: Conflict
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/conflict
            title: Conflict
            status: 409
            detail: There is a conflict with an existing resource.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/conflict
            title: Conflict
            status: 409
            detail: There is a conflict with an existing resource.

    Forbidden:
      description: Forbidden
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/forbidden
            title: Forbidden
            status: 403
            detail: Access is forbidden with the provided credentials.

    InternalServerError:
      description: Internal Server Error
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/internal-server-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred.

    NotFound:
      description: Not Found
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/not-found
            title: Not Found
            status: 404
            detail: The requested resource was not found.

    TooManyRequests:
      description: Too Many Requests
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
        Retry-After:
          $ref: '#/components/headers/Retry-After'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/too-many-requests
            title: Too Many Requests
            status: 429
            detail: You have exceeded the rate limit.

    Unauthorized:
      description: Unauthorized
      headers:
        RateLimit:
          $ref: '#/components/headers/RateLimit'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://example.com/errors/unauthorized
            title: Unauthorized
            status: 401
            detail: You do not have the necessary permissions.